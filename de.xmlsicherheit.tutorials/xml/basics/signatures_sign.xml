<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../resources/stylesheet.xsl"?><chapter category="basics" xmlns="http://www.xml-sicherheit.de" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:id="signatures_sign" xml:lang="de" xsi:schemaLocation="http://www.xml-sicherheit.de ../../resources/documentation.xsd">	<title>Signierung</title>	<text>		<p>Die Erzeugung von digitalen Signaturen (<keyword>core generation</keyword>) mit der Extensible Markup Language verläuft in zwei aufeinander folgenden Schritten. Zuerst wird das zu signierende XML-Dokument aufbereitet und für die Signierung vorbereitet (<keyword>reference generation</keyword>), anschließend folgt die Generierung der Signatur (<keyword>signature generation</keyword>).</p>		<p>			<strong>Reference Generation (Generierung der Reference-Elemente)</strong>		</p>		<p>Für jedes zu signierende Datenobjekt werden nach dem Laden der Ressource</p>		<list type="ordered">			<point>alle angegebenen <link id="signatures_transform.html">Transformationen</link> angewandt,</point>			<point>wird aus dem Ergebnis der letzten <link id="signatures_transform.html">Transformation</link> für jede kanonisierte Ressource der Hashwert berechnet</point>			<point>und zuletzt das <link id="signatures_syntax_signedinfo.html#Reference">Reference</link> Element zusammen mit Angabe der angewandten Transformationen, einer optionalen ID, der <link id="signatures_syntax_signedinfo.html#DigestMethod">DigestMethod</link> und des <link id="signatures_syntax_signedinfo.html#DigestValue">DigestValue</link> Elements erzeugt.</point>		</list>		<p>			<strong>Signature Generation (Generierung der Signatur)</strong>		</p>		<list type="ordered">			<point>Zunächst wird das <link id="signatures_syntax_signedinfo.html">SignedInfo</link> Element zusammen mit den Kindelementen <link id="signatures_syntax_signedinfo.html#SignatureMethod">SignatureMethod</link>, <link id="signatures_syntax_signedinfo.html#CanonicalizationMethod">CanonicalizationMethod</link> und ein bis mehreren <link id="signatures_syntax_signedinfo.html#Reference">Reference</link> Elementen generiert.</point>			<point>Die Elemente werden in das Element <link id="signatures_syntax_signedinfo.html">SignedInfo</link> eingeschlossen und die Kanonisierung dieses Elements durchgeführt. Über diese kanonische Form wird dann der <link id="signatures_syntax_signaturevalue.html">SignatureValue</link> basierend auf den in <link id="signatures_syntax_signedinfo.html">SignedInfo</link> angegebenen Algorithmen berechnet.</point>			<point>Mit diesen Daten wird das vollständige <link id="signatures_syntax_signature.html">Signature</link> Element erstellt und der Wert der Signatur im Base-64 encoding in SignatureValue abgelegt. Optional können noch weitere Schlüsselinformationen (der öffentliche Schlüssel des Signierenden) mittels des Elements <link id="signatures_syntax_keyinfo.html">KeyInfo</link> zur Signatur hinzugefügt werden. Der öffentliche Schlüssel wird für eine spätere Verifizierung der Signatur benötigt. Im Falle einer qualifizierten Signatur fordert das Gesetz, dass das Zertifikat mit in die Signaturberechnung eingeht. Daher kann an dieser Stelle auch das gesamte Zertifikat und nicht nur der öffentliche Schlüssel angegeben werden. Mit einer Referenz auf dieses Element wird dieses dann ebenfalls mit in die Signaturberechnung einbezogen.</point>		</list>		<p>Mit einem Manifest können mehrere Ressourcen auf ein Mal signiert werden. Hierbei hat auch die Anwendung die Kontrolle über die weiteren Aktionen, wenn z.B. die Verifizierung einer Referenz fehlschlägt. Normalerweise würde bei nur einer ungültigen oder nicht erreichbaren Ressource automatisch die gesamte Signatur ungültig. Mit einem Manifest ist es außerdem möglich, mit mehreren Schlüsseln effizient dieselben Ressourcen zu signieren.</p>	</text></chapter>